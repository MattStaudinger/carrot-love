// --------------------
// Definition of variables
$primary: #32c3ff;
/* RGB */
$grey: rgba(187, 203, 203, 1);
$green: rgba(120, 188, 97, 1);
$white: rgba(241, 247, 237, 1);
$blue: rgba(126, 196, 211, 1);
$black: rgba(66, 75, 84, 1);

////////////////////
/// Typhography ///
//
// Font Family
$font-family: Montserrat;
//
// Font Weights
$fw-300: 300;
$fw-400: 400;
$fw-500: 500;
$fw-600: 600;
//
// Font Size
$fs-small: 12px;
$fs-medium: 14px;
$fs-default: 16px;
$fs-large: 18px;
$fs-extra-large: 24px;
//
////////////////////
///    colors   /// 
//
// Base Colors
$white: #fff;
$black: #000;
$gray: #333;
$puple: #b95ed5;
$pink: #f79494;
//
// Text Colors
$font-white: $white;
$font-black: $black;
$font-gray: $gray;
$font-puple: $puple;
$font-pink: $pink;
//
// Background Colors
$background-white: $white;
$background-black: $black;
$background-gray: $gray;
$background-puple: $puple;
$background-pink: $pink; 
//
// Border Colors
$border-white: $white;
$border-black: $black;
$border-gray: $gray;
$border-pink: $pink;

// Create mixin for font-weight and font-size properties
@mixin custom-font($fontsize, $fontweight) {
    font-weight: $fontweight;
    font-size: $fontsize;
}

// Create mixin for transition property
@mixin transition($time, $type, $property) {
    transition: $time $type $property;
    -moz-transition: $time $type $property;
    -webkit-transition: $time $type $property;
}

// Create mixin for transition property with transition dela
@mixin transition-with-delay($tim, $dela, $typ, $propert) {
    transition: $tim $dela $typ $propert;
    -moz-transition: $tim $dela $typ $propert;
    -webkit-transition: $tim $dela $typ $propert;
}

// Create mixin for border-radius property
@mixin border-radius($radius) {
    border-radius: $radius;
    -moz-border-radius: $radius;
    -webkit-border-radius: $radius;
}

// Create mixin for transition property
@mixin box-shadow($shadow) {
    box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    -webkit-box-shadow: $shadow;
}

@import url('https://fonts.googleapis.com/css?family=Montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700i,800,800i,900,900i');
// ----------------------------------------
// To install Boostrap:
// 1) Run in the client folder: $ npm i bootstrap
// 2) Import bootstrap with the following line
// @import 'bootstrap/scss/bootstrap';
// ----------------------------------------


// --------------------
// Style reusable for all components
body {
  margin: 0;
  padding: 0;
  font-family: 'Josefin Sans', sans-serif;
  color: $black;
  // background-color: $green;

}

.info {
  margin: 20px;
  padding: 10px 20px;
  border-radius: 10px;
  display: inline-block;
  background-color: #5776e9;
  color: white;
}

.info.info-danger {
  background-color: #e73f3f;
}

.fixedbutton {
  position: fixed;
  bottom: 10px;
  right: 10px; 
}

/*
@media only screen and (min-width: 320px) {
.DetailImg{
  max-width: 70% !important;
  height: auto !important;
  /* position: relative !important;
  left: 200px !important; */
}
}

@media only screen and (min-width: 768px) {
  .DetailImg{
    max-width: 60% !important;
    height: auto !important;
  }
  }

@media only screen and (min-width: 1024px) {
    .DetailImg{
      max-width: 50% !important;
      height: auto !important;
    }
    }
 nav {
  background-color: $green;
  padding: 20px 0;
  color: white;
  width: 100%;
  position: fixed;
  top: 0;
  z-index: 1001;
} 

.BelowNav{
  overflow: scroll;
  }

@media only screen and (min-width: 0px) {
.detailPic{
    max-width: 75% !important;
    height: auto !important;
    align-self: center !important;
}
}

@media only screen and (min-width: 450px) and (max-width: 500px) {
  .detailPic{
      max-width: 68% !important;
      height: auto !important;
      align-self: center !important;
  }
  }

  @media only screen and (min-width: 501px) and (max-width: 599px) {
    .detailPic{
        max-width: 60% !important;
        height: auto !important;
        align-self: center !important;
    }
    }

  @media only screen and (min-width: 600px) and (max-width: 650px) {
    .detailPic{
        max-width: 58% !important;
        height: auto !important;
        align-self: center !important;
    }
    }

  @media only screen and (min-width: 651px) and (max-width: 699px) {
      .detailPic{
          max-width: 53% !important;
          height: auto !important;
          align-self: center !important;
      }
      }

  @media only screen and (min-width: 700px) and (max-width: 767px) {
        .detailPic{
            max-width: 48% !important;
            height: auto !important;
            align-self: center !important;
        }
        }

@media only screen and (min-width: 768px) {
  .detailPic{
      max-width: 60% !important;
      height: auto !important;
      align-self: center !important;
  }
  }

  @media only screen and (min-width: 1024px) {
    .detailPic{
        max-width: 50% !important;
        height: auto !important;
        align-self: center !important;
    }
    }

    @media only screen and (min-width: 1224px) {
      .detailPic{
          max-width: 45% !important;
          height: auto !important;
          align-self: center !important;
      }
      }

      @media only screen and (max-width: 769px) {
        .smallScreen{
            margin-top: 300px !important;
        }
        }

      @media only screen and (max-width: 769px) {
          .smallScreenCenter{
              margin-top: 350px !important;
              align-self: center !important;
          }
          }
   


@media only screen and (min-width: 375px) {
  .BelowNav {
    height: 70px !important;
    width: 100%;
  }
}

@media only screen and (min-width: 320px) {
  .BelowNav {
    margin-top: 19% !important;
  }
}

@media only screen and (min-width: 411px) {
  .BelowNav {
    margin-top: 16% !important;
  }
}

@media only screen and (min-width: 768px) {
  .BelowNav {
    margin-top: 8.7% !important;
  }
}

@media only screen and (min-width: 1000px) {
  .BelowNav {
    margin-top: 8% !important;
  }
} */
// --------------------
// Style for App component

.App {
  text-align: center;


  .App-header {
      background-color: $green;
      padding: 15px 0;
      color: white;
      width: 100%;
      position: fixed;
      z-index: 1001;
      top:0;

    .HomeButton{
      margin-right: 10%;
      :hover {
        background-color: rgb(236, 233, 233);
      }
    }
    

    a {
      color: white;
      padding: 0 5px;
      text-decoration: unset;
    }

    a.active {
      font-weight: bold;
    }
  }

  .App-title {
    font-size: 1.5em;
  }

  .App-intro {
    font-size: large;
  }

  @keyframes App-logo-spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }
}

// --------------------
// Style for Home component
.Home {
  background-color: $green;
  height: 95vh;
  width: 100vw;
  color:$white;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  p {
    font-size: 1.2em;
  }
  input {
    width: 300px;
    height: 50px;
    font-size: 20px;
    color: $black;
  }

  .radio-buttons{
    width: 400px;
  }

  .btn-submit {
    width: 150px;
    height: 30px;
    margin-top: 20px;
    background-color: $white;
    border-radius: 20px;
  }


}

#root {
  height: 98vh;
}

// --------------------
// Style for Secret component
.Secret {
  .result {
    font-size: 1.2em;
    color: $primary;
  }
}

.calender {
overflow: scroll;
}

.collection {
overflow: scroll;
height: 98vh;
}

.calender-card {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  background-color: white;
  padding: 20px;
  margin: 5px;
}

edit-plant{
  overflow: scroll;
  height: 98vh;
}

.hidden {
  display: none;
}

.form{
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 85vh;
  font-family: 'Josefin Sans', sans-serif;
  a{
    text-decoration: underline;
    color: $green;
  }
  
}

.landing-page{
  background: $green;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height:100vh;
  color: $white;
  z-index: 2;

  h1{
    font-size: 4em;
    margin-bottom: 0;  
    z-index: 2;


  }

  img{
height:100vh;
display: flex;
justify-content: center;
align-items: center;
  }

  .img1{
    object-fit: contain;
    width: 300px;
    position: absolute;
    padding: 20px;
    top: 0;
    z-index: 1;
    left: 5%;

  }
  a{
    text-decoration: none;
    background-color: #F4743B;
    padding: 20px;
    border-radius: 10%;
    margin: 30px;
    color: $white;
    z-index: 2;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

  }

  .flex-row{
    display: flex;
    justify-content: center;
    flex-direction: row;

  }

  .block-white{
  //   // height:10vh;
  //   // background-color: $white;
  //   padding: 30px;
  //   border-radius: 10%;
  //   z-index: 2;
  //   background-color: #F4743B;
  //   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  z-index: 2;
  
}
    p{
      margin-bottom: 40px;  
      font-weight: 50;
      z-index: 2;
      border-bottom: 1px solid $white;
    }
  }


.input{
  font-family: 'Josefin Sans', sans-serif;
font-size: 1.4em;
}


.addPlantView2{
  .user-input{
    border: none;
    border-bottom: 1px solid $white;
    background: transparent;
    color: white;
    font-family: 'Josefin Sans', sans-serif;
font-size: 1.4em;
  }
  .margin{
    margin-top:30px;
  }
  .margin-btn{
    margin-top: 60px;
  }
}

.addPlantView{
  background-color: $green;
  height: 98vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-top: 20px;
  color: $white;

  // input[type=checkbox] {
  //   width: 30px;
  //   height: 30px;
  //   position: absolute;
  //   top: -9999px;
  //   left: -9999px;
  
  // }

  .checkbox{
    background: green;
   width: 400px;
   height: 100px;
   line-height: 100px;
   color: white;
   text-align: center;
  }

  input[type=checkbox]:checked ~ div {
    background: red;
 }

  .radio-buttons{
    display: flex;
    flex-direction: row;
  justify-content: center;
  align-items: flex-start;
  margin: 20px 0;
  }
  .checkbox-container{
    display: flex;
    flex-direction: column;
  justify-content: center;
  align-items: center;
  margin: 0 20px;
  }
  
  .center{
    // width:600px;
    border-top: 1px solid $white;
    padding: 10px 0;
    display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  max-width: 60vw;

  }
    h2{
      margin-bottom: 20px;
      color: $white;
    }

    .btn-submit{
      margin-top:20px;
      width: 100px;
      height: 60px;
      border-radius: 10%;
      font-size: 1.8em;
      color: $black
    }

    .btn-back{
      position: absolute;
      top:10px;
      left: 10px;
      z-index: 1002;
      // border-radius: 50%;
      // border: 1.5px solid $white;

    }
}

label {
  display: inline-block; // to make it easier to click
  color: #fff;
  cursor: pointer;
  position: relative; // important

  // Now we'll create the checkbox object

  div {
    display: inline-block;
    position: relative;
    background-color: transparent;
    width: 25px;
    height: 25px;
    transform-origin: center;
    border: 2px solid #fff;
    border-radius: 50%;
    vertical-align: -6px;
    margin-right: 10px;
    transition: background-color 150ms 200ms, transform 350ms cubic-bezier(.78,-1.22,.17,1.89); // custom ease effect for bouncy animation

// Now we'll create the "tick" using pseudo elements - those will be basically two lines that will be rotated to form the "tick"

  &:before {
    content: "";
    width: 0px;
    height: 2px;
    border-radius: 2px; // so that the tick has nice rounded look
    background: #fff;
    position: absolute;
    transform: rotate(45deg);
    top: 13px; // you'll need to experiment with placement depending on the dimensions you've chosen
    left: 9px; // you'll need to experiment with placement depending on the dimensions you've chosen
    transition: width 50ms ease 50ms;
    transform-origin: 0% 0%;
  }

  &:after {
    content: "";
    width: 0;
    height: 2px;
    border-radius: 2px; // so that the tick has nice rounded look
    background: #fff;
    position: absolute;
    transform: rotate(305deg);
    top: 16px; // you'll need to experiment with placement depending on the dimensions you've chosen
    left: 10px; // you'll need to experiment with placement depending on the dimensions you've chosen
    transition: width 50ms ease;
    transform-origin: 0% 0%;
  }
}
// Time to add some life to it

&:hover {
  div {
    &:before {
      width: 5px;
      transition: width 100ms ease;
    }
    
    &:after {
      width: 10px;
      transition: width 150ms ease 100ms;
    }
  }
}
}

input[type="checkbox"] {
  display: none; // hide the system checkbox

// Let's add some effects after the checkbox is checked

&:checked {
  + label {
    div {
      background-color: #fff;
      transform: scale(1.25); // enlarge the box
      
      &:after {
        width: 10px;
        background: #1790b5;
        transition: width 150ms ease 100ms; // enlarge the tick
      }
      
      &:before {
        width: 5px;
        background: #1790b5;
        transition: width 150ms ease 100ms; // enlarge the tick
      }
    }
    
    &:hover { // copy the states for onMouseOver to avoid flickering
      div {
        background-color: #fff;
        transform: scale(1.25); // enlarge the box

        &:after {
          width: 10px;
          background: #1790b5;
          transition: width 150ms ease 100ms; // enlarge the tick
        }

        &:before {
          width: 5px;
          background: #1790b5;
          transition: width 150ms ease 100ms; // enlarge the tick
        }
      }  
    }
  }
}
}
